%% FACED data extraction

  import pickle
  from scipy.io import savemat
  import pandas as pd

  f = open(r'...\sub006.pkl', 'rb')
  content = pickle.load(f)
  savemat('...\output.mat',{'s6':content})

%% MATLAB MLP
% Create the training dataset
X = C; % Input feature vector
Y = labels;      % Target variable
 
% Define the structure of MLP
net = feedforwardnet([X X X]);   % Set the hidden layer size 3x, x=random neural
 
% Configure neural network parameters
net.trainParam.epochs = 100;    % Maximum iterations
net.trainParam.lr = 0.01;        % Learning rate
net.trainParam.goal = 0.01;      % Convergence condition
 
% Training neural network
[net, tr] = train(net, X', Y');


% Test neural network
output = net(Z')';
disp(output)


%% Generate initial network

import random

def gf(num):
    names = locals()
    for i in range(num):
        names['randomlist' + str(i)] =[]
        for j in range(random.randint(2, 6)):
            names['randomlist' + str(i) ].append(random.randint(50, 150))
        print(names['randomlist' + str(i)])
    return names['randomlist' + str(i)]

def ranstep(num):         #Sort the classifiers randomly
    print(random.sample(range(1,num+1),num))

if __name__ == '__main__':
    gf(5)
    #ranstep(5)

%% Crossover

import random
import generatefather

def crossover(father,mother):
    while 1:
        rd1 = random.randint(1 ,len(father))
        father1 = father[:rd1]
        father2 = father[rd1:]

        rd2 = random.randint(1 ,len(mother))
        mother1 = mother[:rd2]
        mother2 = mother[rd2:]
        son1 = father1 +mother1
        son2 = father2 +mother2

        if len(son1)>=2 and len(son1)<=6 and len(son2)>=2 and len(son2)<=6:
            break
    return father1,mother1,son1,son2

%% Mutation

def mutation(father):

    if len(father)==2:
        if random.randint(0,1):                       #‘add layer’ or change neuron
            a=[random.randint(50,150)]
            father = father + a
        else:
            father[random.randint(0,len(father)- 1)]=random.randint(50,150)
    elif len(father)==6:
        if random.randint(0,1):                       #‘delete layer’ or change neuron
            del father[random.randint(0,len(father)- 1)]
        else:
            father[random.randint(0, len(father) - 1)] = random.randint(50, 150)
    else:
        if random.randint(0,1):                       #‘delete layer’ or change neuron
            del father[random.randint(0,len(father)- 1)]
        elif random.randint(0,1):                       #‘add layer’ or change neuron
            a=[random.randint(80,120)]
            father = father + a
        else:
            father[random.randint(0, len(father) - 1)] = random.randint(50, 150)
    return father

if __name__ == '__main__':
    #father = generatefather.gf(1)
    #mother = generatefather.gf(1)

    if random.random()<0.01:
        father1, mother1, son1, son2 = crossover(father, mother)
        print(father1)
        print(mother1)
        print(son1)
        print(son2)

    if random.random()<0.95:
        father2 = mutation(father)
        print('father: %s' %father2)
    if random.random()<0.95:
        mother2 = mutation(mother)
        print('mother: %s' %mother2)

%% MLP Python

