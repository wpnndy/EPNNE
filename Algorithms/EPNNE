%% FACED data extraction

  import pickle
  from scipy.io import savemat
  import pandas as pd

  f = open(r'...\sub006.pkl', 'rb')
  content = pickle.load(f)
  savemat('...\output.mat',{'s6':content})

%% MATLAB MLP
% Create the training dataset
X = C; % Input feature vector
Y = labels;      % Target variable
 
% Define the structure of MLP
net = feedforwardnet([X X X]);   % Set the hidden layer size 3x, x=random neural
 
% Configure neural network parameters
net.trainParam.epochs = 100;    % Maximum iterations
net.trainParam.lr = 0.01;        % Learning rate
net.trainParam.goal = 0.01;      % Convergence condition
 
% Training neural network
[net, tr] = train(net, X', Y');


% Test neural network
output = net(Z')';
disp(output)


%% Generate initial network

import random

def gf(num):
    names = locals()
    for i in range(num):
        names['randomlist' + str(i)] =[]
        for j in range(random.randint(2, 6)):
            names['randomlist' + str(i) ].append(random.randint(50, 150))
        print(names['randomlist' + str(i)])
    return names['randomlist' + str(i)]

def ranstep(num):         #Sort the classifiers randomly
    print(random.sample(range(1,num+1),num))

if __name__ == '__main__':
    gf(5)
    #ranstep(5)

%% Crossover

import random
import generatefather

def crossover(father,mother):
    while 1:
        rd1 = random.randint(1 ,len(father))
        father1 = father[:rd1]
        father2 = father[rd1:]

        rd2 = random.randint(1 ,len(mother))
        mother1 = mother[:rd2]
        mother2 = mother[rd2:]
        son1 = father1 +mother1
        son2 = father2 +mother2

        if len(son1)>=2 and len(son1)<=6 and len(son2)>=2 and len(son2)<=6:
            break
    return father1,mother1,son1,son2

%% Mutation

def mutation(father):

    if len(father)==2:
        if random.randint(0,1):                       #‘add layer’ or change neuron
            a=[random.randint(50,150)]
            father = father + a
        else:
            father[random.randint(0,len(father)- 1)]=random.randint(50,150)
    elif len(father)==6:
        if random.randint(0,1):                       #‘delete layer’ or change neuron
            del father[random.randint(0,len(father)- 1)]
        else:
            father[random.randint(0, len(father) - 1)] = random.randint(50, 150)
    else:
        if random.randint(0,1):                       #‘delete layer’ or change neuron
            del father[random.randint(0,len(father)- 1)]
        elif random.randint(0,1):                       #‘add layer’ or change neuron
            a=[random.randint(80,120)]
            father = father + a
        else:
            father[random.randint(0, len(father) - 1)] = random.randint(50, 150)
    return father

if __name__ == '__main__':
    #father = generatefather.gf(1)
    #mother = generatefather.gf(1)

    if random.random()<0.01:
        father1, mother1, son1, son2 = crossover(father, mother)
        print(father1)
        print(mother1)
        print(son1)
        print(son2)

    if random.random()<0.95:
        father2 = mutation(father)
        print('father: %s' %father2)
    if random.random()<0.95:
        mother2 = mutation(mother)
        print('mother: %s' %mother2)

%% MLP Python
import numpy as np
import pandas as pd
import evaluate
from sklearn.neural_network import MLPClassifier


def mlpmodel(randomlist,x_train,y_train,x_test,y_test):

    hiddenlayer_size =randomlist
    MLPModel=MLPClassifier(solver='adam',activation = 'relu',max_iter = 700,alpha = 1e-5,hidden_layer_sizes = hiddenlayer_size,random_state = 1,verbose = True)
    MLPModel.fit(x_train,y_train)
    y_predict=MLPModel.predict(x_test)


%% loss function


class WalkerLoss(nn.Module):

    def forward(self, Psts, y):
        equality_matrix = torch.eq(y.clone().view(-1,1), y).float()
        p_target = equality_matrix / equality_matrix.sum(dim=1, keepdim=True)
        p_target.requires_grad = False

        L_walker = F.kl_div(torch.log(1e-8 + Psts), p_target, size_average=False)
        L_walker /= p_target.size()[0]

        return L_walker


class VisitLoss(nn.Module):

    def forward(self, Pt):
        p_visit = torch.ones([1, Pt.size()[1]]) / float(Pt.size()[1])
        p_visit.requires_grad = False
        if Pt.is_cuda: p_visit = p_visit.cuda()
        L_visit = F.kl_div(torch.log(1e-8 + Pt), p_visit, size_average=False)
        L_visit /= p_visit.size()[0]

        return L_visit

class AssociationMatrix(nn.Module):

    def __init__(self):
        super(AssociationMatrix, self).__init__()

    def forward(self, xs, xt):
        """
        xs: (Ns, K, ...)
        xt: (Nt, K, ...)
        """

        # TODO not sure why clone is needed here
        Bs = xs.size()[0]
        Bt = xt.size()[0]

        xs = xs.clone().view(Bs, -1)
        xt = xt.clone().view(Bt, -1)

        W = torch.mm(xs, xt.transpose(1,0))

        # p(xt | xs) as softmax, normalize over xt axis
        Pst = F.softmax(W, dim=1) # Ns x Nt
        # p(xs | xt) as softmax, normalize over xs axis
        Pts = F.softmax(W.transpose(1,0), dim=1) # Nt x Ns

        # p(xs | xs)
        Psts = Pst.mm(Pts) # Ns x Ns

        # p(xt)
        Pt = torch.mean(Pst, dim=0, keepdim=True) # Nt

        return Psts, Pt


class AssociativeLoss(nn.Module):

    def __init__(self, walker_weight = 1., visit_weight = 1.):
        super(AssociativeLoss, self).__init__()

        self.matrix = AssociationMatrix()
        self.walker = WalkerLoss()
        self.visit  = VisitLoss()

        self.walker_weight = walker_weight
        self.visit_weight  = visit_weight

    def forward(self, xs, xt, y):

        Psts, Pt = self.matrix(xs, xt)
        L_walker = self.walker(Psts, y)
        L_visit  = self.visit(Pt)

        return self.visit_weight*L_visit + self.walker_weight*L_walker
